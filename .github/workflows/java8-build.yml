name: Java 8 Build

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['macOS-latest', 'ubuntu-latest']
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build targets
        run: mvn clean package --no-transfer-progress -DskipTests
      - name: Compress files
        run: tar -cf flink-ml.tar ./*
      - name: Upload compressed file
        uses: actions/upload-artifact@v3
        with:
          name: flink-ml-tar-${{ matrix.os }}
          path: ./flink-ml.tar
          retention-days: 1

  java-tests:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        modules: ['lib', 'non-lib']
    steps:
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Download compressed file
        uses: actions/download-artifact@v3
        with:
          name: flink-ml-tar-ubuntu-latest
          path: ./
      - name: Decompress files
        run: tar -xf ./flink-ml.tar
      - name: Install targets
        run: mvn jar:jar install:install --no-transfer-progress
      - name: Test
        run: |
          if [[ "${{ matrix.modules }}" == "lib" ]]
          then
            mvn surefire:test -pl flink-ml-lib --no-transfer-progress
          else
            non_lib_modules=('flink-ml-benchmark' 'flink-ml-core' \
            'flink-ml-dist' 'flink-ml-examples' 'flink-ml-iteration' \
            'flink-ml-tests' 'flink-ml-uber' )
            non_lib_modules=$(printf ",%s" "${non_lib_modules[@]}")
            mvn surefire:test -pl $non_lib_modules --no-transfer-progress
          fi

  python-tests:
    name: python tests on ${{ matrix.os }}
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['macOS-latest', 'ubuntu-latest']
        python-version: ['3.6', '3.7', '3.8']
    steps:
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Download compressed file
        uses: actions/download-artifact@v3
        with:
          name: flink-ml-tar-${{ matrix.os }}
          path: ./
      - name: Decompress files
        run: tar -xf ./flink-ml.tar
      - name: Install targets
        run: mvn jar:jar install:install --no-transfer-progress
      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: pip cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        working-directory: flink-ml-python/dev
        run: python -m pip install -r dev-requirements.txt
      - name: Check code style
        working-directory: flink-ml-python
        run: python -m flake8 --config=setup.cfg
      - name: Check type annotations
        working-directory: flink-ml-python
        run: python -m mypy --config=setup.cfg
      - name: Test the source code
        working-directory: flink-ml-python
        run: |
          pytest pyflink/ml
          pytest pyflink/examples
